adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(3433)
IL_str <- grep("^IL", colnames(training), value = TRUE)
predictors_IL <- predictors[, IL_str]
df <- data.frame(diagnosis, predictors_IL)
inTrain = createDataPartition(df$diagnosis, p = 3/4)[[1]]
training = df[inTrain, ]
testing = df[-inTrain, ]
modelFit <- train(diagnosis ~ ., method="glm", data=training)
predictions <- predict(modelFit, newdata = testing)
C1 <- confusionMatrix(predictions, testing$diagnosis)
print(C1)
modelFit <- train(training$diagnosis ~ ., method = "glm", preProcess = "pca",
data = training, trControl = trainControl(preProcOptions = list(thresh = 0.8)))
C2 <- confusionMatrix(testing$diagnosis, predict(modelFit, testing))
print(C2)
A2 <- C2$overall[1]
A1 <- C1$overall
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(3433)
IL_str <- grep("^IL", colnames(training), value = TRUE)
predictors_IL <- predictors[, IL_str]
df <- data.frame(diagnosis, predictors_IL)
inTrain = createDataPartition(df$diagnosis, p = 3/4)[[1]]
training = df[inTrain, ]
testing = df[-inTrain, ]
modelFit <- train(diagnosis ~ ., method="glm", data=training)
predictions <- predict(modelFit, newdata = testing)
C1 <- confusionMatrix(predictions, testing$diagnosis)
print(C1)
A1 <- C1$overall
modelFit <- train(training$diagnosis ~ ., method = "glm", preProcess = "pca",
data = training, trControl = trainControl(preProcOptions = list(thresh = 0.8)))
C2 <- confusionMatrix(testing$diagnosis, predict(modelFit, testing))
print(C2)
A2 <- C2$overall[1]
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL_str <- grep("^IL", colnames(training), value = TRUE)
preProc <- preProcess(training[, IL_str], method = "pca", thresh = 0.9)
preProc$rotation
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
table(segmentationOriginal$Case)
inTrain <- createDataPartition(y=segmentationOriginal$Case)
training <- segmentationOriginal[inTrain,]
inTrain <- createDataPartition(y=segmentationOriginal$Case)
training <- segmentationOriginal[inTrain,]
inTrain <- createDataPartition(y=segmentationOriginal$Case, list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
dim(training)
dim(testing)
modFit <- train(Case ~ ., method="rpart", data=training)
print(modFit$finalModel)
plot(modFit$finalModel, uniform=TRUE, main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
library(rattle)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
modFit <- train(Case ~ ., method="rpart", data=training)
print(modFit$finalModel)
fancyRpartPlot(modFit$finalModel)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
table(segmentationOriginal$Case)
inTrain <- createDataPartition(y=segmentationOriginal$Case, list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
modFit <- train(Case ~ ., method="rpart", data=training)
print(modFit$finalModel)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
install.packages("RGtk2")
library("RGtk2")
fancyRpartPlot(modFit$finalModel)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
table(segmentationOriginal$Case)
set.seed(125)
inTrain <- createDataPartition(y=segmentationOriginal$Case, list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
modFit <- train(Class ~ ., method="rpart", data=training)
print(modFit$finalModel)
library(RGtk2)
library(rattle)
library(rpart.plot)
fancyRpartPlot(modFit$finalModel)
predict(modFit, newdata = train)
predict(modFit, newdata = training)
table(predict(modFit, newdata = training))
set.seed(125)
inTrain <- createDataPartition(y=segmentationOriginal$Case, list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
modFit <- train(Class ~ ., method="rpart", data=training)
print(modFit$finalModel)
library(pgmm)
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
View(olive)
model <- train(Area ~ ., data = olive, method = "rpart2")
newdata = as.data.frame(t(colMeans(olive)))
predict(model, newdata = newdata)
library(ElemStatLearn)
install.packages(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
model <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA, method = "glm", family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd, predict(model, newdata = testSA))
missClass(trainSA$chd, predict(model, newdata = trainSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
library(randomForest)
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
b <- varImp(a)
order(b)
set.seed(33833)
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
b <- varImp(a)
order(b)
training.file   <- 'pml-training.csv'
testing.file <- 'pml-testing.csv'
training.url    <- 'http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv'
testing.url  <- 'http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv'
download.file(training.url, training.file)
download.file(testing.url,testing.file )
training.df   <- read.csv(training.file, na.strings=c("NA","#DIV/0!", ""))
testing.df <- read.csv(testing.file, na.strings=c("NA", "#DIV/0!", ""))
training.df<-training.df[,colSums(is.na(training.df)) == 0]
testing.df <-test.cases.df[,colSums(is.na(test.cases.df)) == 0]
training.df   <- read.csv(training.file, na.strings=c("NA","#DIV/0!", ""))
testing.df <- read.csv(testing.file, na.strings=c("NA", "#DIV/0!", ""))
training.df<-training.df[,colSums(is.na(training.df)) == 0]
testing.df <-testing.df[,colSums(is.na(test.cases.df)) == 0]
training.df   <- read.csv(training.file, na.strings=c("NA","#DIV/0!", ""))
testing.df <- read.csv(testing.file, na.strings=c("NA", "#DIV/0!", ""))
training.df<-training.df[,colSums(is.na(training.df)) == 0]
testing.df <-testing.df[,colSums(is.na(testing.df)) == 0]
View(testing.df)
training.df   <-training.df[,-c(1:7)]
testing.df <-testing.df[,-c(1:7)]
inTraining.matrix    <- createDataPartition(training.df$classe, p = 0.75, list = FALSE)
training.data.df <- training.df[inTraining.matrix, ]
testing.data.df  <- training.df[-inTraining.matrix, ]
library(caret)
library(Hmisc)
library(foreach)
library(randomForest)
library(doParallel)
set.seed(123)
install.packages("doParallel")
library(doParallel)
inTraining.matrix    <- createDataPartition(training.df$classe, p = 0.75, list = FALSE)
training.data.df <- training.df[inTraining.matrix, ]
testing.data.df  <- training.df[-inTraining.matrix, ]
```
feature_set <- colnames(training.df)
newdata     <- testing.df
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
x <- evaluation_data
x <- x[feature_set[feature_set!='classe']]
answers <- predict(rf, newdata=x)
pml_write_files(answers)
library(caret)
library(Hmisc)
library(foreach)
library(randomForest)
library(doParallel)
set.seed(123)
training.file   <- 'pml-training.csv'
testing.file <- 'pml-testing.csv'
training.url    <- 'http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv'
testing.url  <- 'http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv'
download.file(training.url, training.file)
download.file(testing.url,testing.file )
training.df   <- read.csv(training.file, na.strings=c("NA","#DIV/0!", ""))
evaluation_data <- read.csv(testing.file, na.strings=c("NA", "#DIV/0!", ""))
training.df<-training.df[,colSums(is.na(training.df)) == 0]
evaluation_data <-testing.df[,colSums(is.na(testing.df)) == 0]
evaluation_data <-testing.df[,colSums(is.na(evaluation_data)) == 0]
evaluation_data <-evaluation_data[,colSums(is.na(evaluation_data)) == 0]
training.df   <-training.df[,-c(1:7)]
evaluation_data <-evaluation_data[,-c(1:7)]
inTraining.matrix    <- createDataPartition(training.df$classe, p = 0.75, list = FALSE)
training.data.df <- training.df[inTraining.matrix, ]
testing.data.df  <- evaluation_data[-inTraining.matrix, ]
registerDoParallel()
classe <- training.data.df$classe
variables <- training.data.df[-ncol(training.data.df)]
rf <- foreach(ntree=rep(250, 4), .combine=randomForest::combine, .packages='randomForest') %dopar% {
randomForest(variables, classe, ntree=ntree)
}
training.predictions <- predict(rf, newdata=training.data.df)
confusionMatrix(training.predictions,training.data.df$classe)
testing.predictions <- predict(rf, newdata=testing.data.df)
confusionMatrix(testing.predictions,testing.data.df$classe)
testing.predictions <- predict(rf, newdata=testing.data.df)
confusionMatrix(testing.predictions,testing.data.df$classe)
library(caret)
library(Hmisc)
library(foreach)
library(randomForest)
library(doParallel)
set.seed(123)
training.file   <- 'pml-training.csv'
evaluation.file <- 'pml-testing.csv'
training.url    <- 'http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv'
evaluation.url  <- 'http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv'
download.file(training.url, training.file)
download.file(evaluation.url,evaluation.file )
training.df   <- read.csv(training.file, na.strings=c("NA","#DIV/0!", ""))
evaluation_data <- read.csv(evaluation.file, na.strings=c("NA", "#DIV/0!", ""))
training.df<-training.df[,colSums(is.na(training.df)) == 0]
evaluation_data <-evaluation_data[,colSums(is.na(evaluation_data)) == 0]
training.df   <-training.df[,-c(1:7)]
evaluation_data <-evaluation_data[,-c(1:7)]
inTraining.matrix    <- createDataPartition(training.df$classe, p = 0.75, list = FALSE)
training.data.df <- training.df[inTraining.matrix, ]
evaluation.data.df  <- evaluation_data[-inTraining.matrix, ]
registerDoParallel()
classe <- training.data.df$classe
variables <- training.data.df[-ncol(training.data.df)]
rf <- foreach(ntree=rep(250, 4), .combine=randomForest::combine, .packages='randomForest') %dopar% {
randomForest(variables, classe, ntree=ntree)
}
training.predictions <- predict(rf, newdata=training.data.df)
confusionMatrix(training.predictions,training.data.df$classe)
evaluation.predictions <- predict(rf, newdata=evalution.data.df)
library(Hmisc)
library(caret)
library(randomForest)
library(foreach)
library(doParallel)
set.seed(123)
training.file   <- 'pml-training.csv'
test.cases.file <- 'pml-test.csv'
training.url    <- 'http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv'
test.cases.url  <- 'http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv'
download.file(training.url, training.file)
download.file(test.cases.url,test.cases.file )
training.df   <-read.csv(training.file, na.strings=c("NA","#DIV/0!", ""))
test.cases.df <-read.csv(test.cases.file , na.strings=c("NA", "#DIV/0!", ""))
training.df<-training.df[,colSums(is.na(training.df)) == 0]
test.cases.df <-test.cases.df[,colSums(is.na(test.cases.df)) == 0]
training.df   <-training.df[,-c(1:7)]
test.cases.df <-test.cases.df[,-c(1:7)]
inTraining.matrix    <- createDataPartition(training.df$classe, p = 0.75, list = FALSE)
training.data.df <- training.df[inTraining.matrix, ]
testing.data.df  <- training.df[-inTraining.matrix, ]
registerDoParallel()
classe <- training.data.df$classe
variables <- training.data.df[-ncol(training.data.df)]
rf <- foreach(ntree=rep(250, 4), .combine=randomForest::combine, .packages='randomForest') %dopar% {
randomForest(variables, classe, ntree=ntree)
}
training.predictions <- predict(rf, newdata=training.data.df)
confusionMatrix(training.predictions,training.data.df$classe)
testing.predictions <- predict(rf, newdata=testing.data.df)
confusionMatrix(testing.predictions,testing.data.df$classe)
feature_set <- colnames(training.df)
newdata     <- test.cases.df
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
x <- evaluation_data
x <- testing.data.df
x <- x[feature_set[feature_set!='classe']]
answers <- predict(rf, newdata=x)
answers
pml_write_files(answers)
setwd("C:/Users/Scot Wolf/Google Drive/MOOCs/Data Science Specialization (Johns Hopkins - Coursera)/8 Practical Machine Learning/Course Project")
pml_write_files(answers)
answers
training.url    <- 'https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv'
test.cases.url  <- 'https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv'
download.file(training.url, training.file)
download.file(test.cases.url,test.cases.file )
library(Hmisc)
library(caret)
library(randomForest)
library(foreach)
library(doParallel)
set.seed(998)
training.file   <- 'pml-training.csv'
test.cases.file <- 'pml-test.csv'
training.url    <- 'https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv'
test.cases.url  <- 'https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv'
download.file(training.url, training.file)
download.file(test.cases.url,test.cases.file )
training.df   <-read.csv(training.file, na.strings=c("NA","#DIV/0!", ""))
test.cases.df <-read.csv(test.cases.file , na.strings=c("NA", "#DIV/0!", ""))
training.df<-training.df[,colSums(is.na(training.df)) == 0]
test.cases.df <-test.cases.df[,colSums(is.na(test.cases.df)) == 0]
training.df   <-training.df[,-c(1:7)]
test.cases.df <-test.cases.df[,-c(1:7)]
inTraining.matrix    <- createDataPartition(training.df$classe, p = 0.75, list = FALSE)
training.data.df <- training.df[inTraining.matrix, ]
testing.data.df  <- training.df[-inTraining.matrix, ]
registerDoParallel()
classe <- training.data.df$classe
variables <- training.data.df[-ncol(training.data.df)]
rf <- foreach(ntree=rep(250, 4), .combine=randomForest::combine, .packages='randomForest') %dopar% {
randomForest(variables, classe, ntree=ntree)
}
training.predictions <- predict(rf, newdata=training.data.df)
confusionMatrix(training.predictions,training.data.df$classe)
testing.predictions <- predict(rf, newdata=testing.data.df)
confusionMatrix(testing.predictions,testing.data.df$classe)
feature_set <- colnames(training.df)
newdata     <- test.cases.df
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
x <- testing.data.df
x <- x[feature_set[feature_set!='classe']]
answers <- predict(rf, newdata=x)
answers
pml_write_files(answers)
library(Hmisc)
library(caret)
library(randomForest)
library(foreach)
library(doParallel)
set.seed(2000)
options(warn=-1)
training.file   <- 'pml-training.csv'
test.cases.file <- 'pml-test.csv'
training.url    <- 'https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv'
test.cases.url  <- 'https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv'
download.file(training.url, training.file)
download.file(test.cases.url,test.cases.file )
training_data   <-read.csv(training.file, na.strings=c("NA","#DIV/0!", ""))
testing_data <-read.csv(test.cases.file , na.strings=c("NA", "#DIV/0!", ""))
training_data <- training_data[,colSums(is.na(training.df)) == 0]
testing_data <- testing_data[,colSums(is.na(test.cases.df)) == 0]
training_data <- training_data[,colSums(is.na(training_data)) == 0]
testing_data <- testing_data[,colSums(is.na(testing_data)) == 0]
training_data   <- training_data[,-c(1:7)]
testing_data <- testing_data[,-c(1:7)]
inTraining.matrix    <- createDataPartition(training_data$classe, p = 0.75, list = FALSE)
training <- training_data[inTraining.matrix, ]
testing  <- taining_data[-inTraining.matrix, ]
testing  <- training_data[-inTraining.matrix, ]
registerDoParallel()
x <- training[-ncol(training)]
y <- training$classe
rf <- foreach(ntree=rep(150, 6), .combine=randomForest::combine, .packages='randomForest') %dopar% {
randomForest(x, y, ntree=ntree)
}
training_predictions <- predict(rf, newdata=training)
confusionMatrix(training_predictions,training$classe)
testing_predictions <- predict(rf, newdata=testing)
confusionMatrix(testing_predictions,testing$classe)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
x <- evaluation_data
x <- x[feature_set[feature_set!='classe']]
answers <- predict(rf, newdata=x)
answers
pml_write_files(answers)
View(inTraining.matrix)
View(inTraining.matrix)
setwd("C:/Users/Scot Wolf/Google Drive/MOOCs/Data Science Specialization (Johns Hopkins - Coursera)/8 Practical Machine Learning/Course Project/Output")
library(AppliedPredictiveModeling)
library(caret)
library(rattle)
library(rpart.plot)
library(randomForest)
url_raw_training <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
file_dest_training <- "pml-training.csv"
url_raw_testing <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
file_dest_testing <- "pml-testing.csv"
train <- read.csv(file_dest_training, na.strings=c("NA",""), header=TRUE)
test <- read.csv(file_dest_testing, na.strings=c("NA",""), header=TRUE)
setwd("C:/Users/Scot Wolf/Google Drive/MOOCs/Data Science Specialization (Johns Hopkins - Coursera)/8 Practical Machine Learning/Course Project")
url_raw_training <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
file_dest_training <- "pml-training.csv"
url_raw_testing <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
file_dest_testing <- "pml-testing.csv"
train <- read.csv(file_dest_training, na.strings=c("NA",""), header=TRUE)
test <- read.csv(file_dest_testing, na.strings=c("NA",""), header=TRUE)
var<-names(train)[apply(train,2,function(x) table(is.na(x))[1]==19622)]
train2<-train[,var]
test2<-test[,var[-length(var)]]
var2<-melt(apply(train2,2,function(x) sum(ifelse(x=="",1,0)))==0)
select.var<-rownames(var2)[var2$value==TRUE]
train3<-train2[,select.var]
test3<-test2[,select.var[-length(select.var)]]
train4<-train3[,names(train3[-c(1:7,length(train3))])]
test4<-test3[,names(test3[-c(1:7)])]
library(AppliedPredictiveModeling)
library(caret)
library(rattle)
library(rpart.plot)
library(randomForest)
library(lattice)
library(reshape2)
var<-names(train)[apply(train,2,function(x) table(is.na(x))[1]==19622)]
train2<-train[,var]
test2<-test[,var[-length(var)]]
var2<-melt(apply(train2,2,function(x) sum(ifelse(x=="",1,0)))==0)
select.var<-rownames(var2)[var2$value==TRUE]
train3<-train2[,select.var]
test3<-test2[,select.var[-length(select.var)]]
train4<-train3[,names(train3[-c(1:7,length(train3))])]
test4<-test3[,names(test3[-c(1:7)])]
rfModel <- randomForest(classe ~ .,data = trainData,importance = TRUE,ntrees = 10)
highCorr <- findCorrelation(correlations, cutoff = .75)
predictor <- train4[, -highCorr]
filtered.test4 <- test4[, -highCorr]
classe<-train3$classe
trainData<-cbind(classe,predictor)
var<-names(train)[apply(train,2,function(x) table(is.na(x))[1]==19622)]
train2<-train[,var]
test2<-test[,var[-length(var)]]
var2<-melt(apply(train2,2,function(x) sum(ifelse(x=="",1,0)))==0)
select.var<-rownames(var2)[var2$value==TRUE]
train3<-train2[,select.var]
test3<-test2[,select.var[-length(select.var)]]
train4<-train3[,names(train3[-c(1:7,length(train3))])]
test4<-test3[,names(test3[-c(1:7)])]
highCorr <- findCorrelation(correlations, cutoff = .75)
predictor <- train4[, -highCorr]
filtered.test4 <- test4[, -highCorr]
classe<-train3$classe
trainData<-cbind(classe,predictor)
highCorr <- findCorrelation(correlations, cutoff = .75)
library(caret)
highCorr <- findCorrelation(correlations, cutoff = .75)
predictor <- train4[, -highCorr]
filtered.test4 <- test4[, -highCorr]
classe<-train3$classe
trainData<-cbind(classe,predictor)
correlations <- cor(train4)
highCorr <- findCorrelation(correlations, cutoff = .75)
predictor <- train4[, -highCorr]
filtered.test4 <- test4[, -highCorr]
classe<-train3$classe
trainData<-cbind(classe,predictor)
rfModel <- randomForest(classe ~ .,data = trainData,importance = TRUE,ntrees = 10)
confusion<-rfModel$confusion
sensitivity<-(confusion[2,2]/(confusion[2,2]+confusion[2,1]))*100
specificity<-(confusion[1,1]/(confusion[1,1]+confusion[1,2]))*100
overall_error<-rfModel$err.rate[length(rfModel$err.rate[,1]),1]*100
overall_accuracy<-1-overall_error
out.test<-predict(rfModel,filtered.test4)
print(rfModel)
answers<- as.vector(out.test)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(answers)
View(train2)
